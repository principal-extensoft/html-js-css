<#
.SYNOPSIS
    Lists installed .NET Framework and .NET (Core/5+) versions on a Windows machine.
.DESCRIPTION
    1. Enumerates .NET Framework versions from the registry.
    2. Checks for the dotnet CLI to list .NET Core/5+ SDKs & runtimes.
#>

Write-Host "=================== .NET Framework Versions ==================="

# Path in Registry for .NET Framework setup info
$netfxKey = 'HKLM:\SOFTWARE\Microsoft\NET Framework Setup\NDP'

if (Test-Path $netfxKey) {

    # Query all subkeys for version info
    Get-ChildItem $netfxKey -Recurse |
        Get-ItemProperty -Name Version, Release, Install -ErrorAction SilentlyContinue |
        Where-Object {
            # Filter: Must have Install=1, and either a 'Version' or 'Release' property
            # Also exclude "Setup" or "Client" subkeys by ignoring those that start with 'S'
            ($_.Install -eq 1) -and (($_.Version) -or ($_.Release)) -and ($_.PSChildName -notmatch '^(Client|Full|Setup|v[0-9]\.[0-9]$)')
        } |
        ForEach-Object {
            $version = $_.Version
            $release = $_.Release

            # If we have a .NET 4.5+ Release DWORD, map it to a friendly version
            if ($release) {
                switch ($release) {
                    { $_ -ge 528040 } { $version = '4.8 or later'; break }
                    { $_ -ge 461808 } { $version = '4.7.2'; break }
                    { $_ -ge 461308 } { $version = '4.7.1'; break }
                    { $_ -ge 460798 } { $version = '4.7'; break }
                    { $_ -ge 394802 } { $version = '4.6.2'; break }
                    { $_ -ge 394254 } { $version = '4.6.1'; break }
                    { $_ -ge 393295 } { $version = '4.6'; break }
                    { $_ -ge 379893 } { $version = '4.5.2'; break }
                    { $_ -ge 378675 } { $version = '4.5.1'; break }
                    { $_ -ge 378389 } { $version = '4.5'; break }
                    default { $version = "4.5 or later (unknown release: $release)" }
                }
            }

            [PSCustomObject]@{
                Key     = $_.PSChildName
                Version = $version
                Release = $release
            }
        } |
        Sort-Object {[int]($_.Release)} -Descending |
        Format-Table -AutoSize
}
else {
    Write-Host "No .NET Framework registry key found (unlikely on a normal Windows installation)."
}

Write-Host "`n=================== .NET (Core / 5 / 6 / 7+) Versions ==================="

# Check if "dotnet" is on the path
if (Get-Command dotnet -ErrorAction SilentlyContinue) {
    Write-Host "`n-- Installed SDKs --"
    dotnet --list-sdks

    Write-Host "`n-- Installed Runtimes --"
    dotnet --list-runtimes
}
else {
    Write-Host "The dotnet CLI was not found on this system. (No .NET Core / 5+ SDKs or runtimes detected, or it's not in PATH.)"
}
